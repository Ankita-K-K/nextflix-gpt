{"ast":null,"code":"var _jsxFileName = \"C:\\\\nextflix-gpt\\\\src\\\\components\\\\GptSearchBar.js\",\n  _s = $RefreshSig$();\nimport React, { useRef } from 'react';\nimport lang from '../utils/languageConstants';\nimport { useDispatch, useSelector } from 'react-redux';\nimport openai from '../utils/openai';\nimport { OPTIONS } from '../utils/constants';\nimport { addGptMovieResult } from '../utils/gptSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GptSearchBar = () => {\n  _s();\n  const dispatch = useDispatch();\n  const selectedLanguage = useSelector(store => store.lang.lang);\n  console.log(selectedLanguage);\n  const searchText = useRef(null);\n  const searchMovieTMDB = async movie => {\n    const data = await fetch('https://api.themoviedb.org/3/search/movie?query=' + movie + '&include_adult=false&page=1', OPTIONS);\n    const json = await data.json();\n    return json.results;\n  };\n  const handleSearchClick = async () => {\n    var _gptResults$choices$, _gptResults$choices$$;\n    console.log(searchText.current.value);\n    //make an api call to openai get movie results\n    const gptQuery = \"Act as a movie recomandation system and suggest some movies for the query\" + searchText.current.value + \". only give me names of 5 movies, comma seperated like the example result given ahead. Example Result: Tare Zameen Par, Chichore, 3-idiots, Golmaal, Koi Mil Gaya\";\n    const gptResults = await openai.chat.completions.create({\n      messages: [{\n        role: 'user',\n        content: gptQuery\n      }],\n      model: 'gpt-3.5-turbo'\n    });\n    const gptMovies = (_gptResults$choices$ = gptResults.choices[0]) === null || _gptResults$choices$ === void 0 ? void 0 : (_gptResults$choices$$ = _gptResults$choices$.message) === null || _gptResults$choices$$ === void 0 ? void 0 : _gptResults$choices$$.content.split(\", \");\n    const promiseArray = gptMovies.map(movie => searchMovieTMDB(movie));\n    const tmbdResults = await Promise.all(promiseArray);\n    dispatch(addGptMovieResult({\n      movieNames: gptMovies,\n      movieResults: tmbdResults\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"w-screen h-screen bg-gradient-to-b from-zinc-950\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pt-[35%] md:pt-[13%] flex justify-center\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"bg-black w-full md:w-1/2 grid grid-cols-12\",\n        onSubmit: e => e.preventDefault(),\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ref: searchText,\n          className: \"p-2 text-white my-4 ml-2 col-span-8 outline-none bg-zinc-800 mr-0\",\n          placeholder: lang[selectedLanguage].gptSearchPH\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"text-zinc-600 scale-x-150 text-3xl\",\n          children: \"X\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"px-1 py-1 font-semibold bg-red-500 rounded-sm text-white col-span-3 m-4\",\n          onClick: handleSearchClick,\n          children: lang[selectedLanguage].search\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(GptSearchBar, \"qMQoDG1pGLzfr5LIDJur/HiFeEo=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = GptSearchBar;\nexport default GptSearchBar;\nvar _c;\n$RefreshReg$(_c, \"GptSearchBar\");","map":{"version":3,"names":["React","useRef","lang","useDispatch","useSelector","openai","OPTIONS","addGptMovieResult","jsxDEV","_jsxDEV","GptSearchBar","_s","dispatch","selectedLanguage","store","console","log","searchText","searchMovieTMDB","movie","data","fetch","json","results","handleSearchClick","_gptResults$choices$","_gptResults$choices$$","current","value","gptQuery","gptResults","chat","completions","create","messages","role","content","model","gptMovies","choices","message","split","promiseArray","map","tmbdResults","Promise","all","movieNames","movieResults","className","children","onSubmit","e","preventDefault","type","ref","placeholder","gptSearchPH","fileName","_jsxFileName","lineNumber","columnNumber","onClick","search","_c","$RefreshReg$"],"sources":["C:/nextflix-gpt/src/components/GptSearchBar.js"],"sourcesContent":["import React, { useRef } from 'react'\r\nimport lang from '../utils/languageConstants'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport openai from '../utils/openai'\r\nimport { OPTIONS } from '../utils/constants'\r\nimport { addGptMovieResult } from '../utils/gptSlice'\r\n\r\nconst GptSearchBar = () => {\r\n    const dispatch = useDispatch();\r\n    const selectedLanguage = useSelector((store)=>store.lang.lang);\r\n    console.log(selectedLanguage);\r\n    const searchText = useRef(null);\r\n  const searchMovieTMDB = async (movie) =>{\r\n    const data = await fetch('https://api.themoviedb.org/3/search/movie?query='+ movie + '&include_adult=false&page=1', OPTIONS);\r\n    const json = await data.json();\r\n    return json.results;\r\n  }\r\n\r\nconst handleSearchClick = async () =>{\r\n    console.log(searchText.current.value);\r\n    //make an api call to openai get movie results\r\n    const gptQuery = \"Act as a movie recomandation system and suggest some movies for the query\" + searchText.current.value + \". only give me names of 5 movies, comma seperated like the example result given ahead. Example Result: Tare Zameen Par, Chichore, 3-idiots, Golmaal, Koi Mil Gaya\"\r\n    const gptResults = await openai.chat.completions.create({\r\n        messages: [{ role: 'user', content: gptQuery }],\r\n        model: 'gpt-3.5-turbo',\r\n      });\r\n      const gptMovies = gptResults.choices[0]?.message?.content.split(\", \");\r\n      const promiseArray = gptMovies.map((movie) => searchMovieTMDB(movie));\r\n      const tmbdResults = await Promise.all(promiseArray);\r\n      dispatch(addGptMovieResult({movieNames: gptMovies, movieResults: tmbdResults}));\r\n\r\n}\r\n\r\n\r\n  return (\r\n    <div className='w-screen h-screen bg-gradient-to-b from-zinc-950'>\r\n    <div className='pt-[35%] md:pt-[13%] flex justify-center'>\r\n      <form className='bg-black w-full md:w-1/2 grid grid-cols-12' onSubmit={(e)=>e.preventDefault()}>\r\n        <input type='text' ref={searchText} className='p-2 text-white my-4 ml-2 col-span-8 outline-none bg-zinc-800 mr-0' placeholder={lang[selectedLanguage].gptSearchPH}/>\r\n        <button className='text-zinc-600 scale-x-150 text-3xl'>X</button>\r\n        <button className='px-1 py-1 font-semibold bg-red-500 rounded-sm text-white col-span-3 m-4' onClick={handleSearchClick}>{lang[selectedLanguage].search}</button>\r\n      </form>\r\n    </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GptSearchBar\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}